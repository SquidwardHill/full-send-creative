// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model CaseStudy {
  id            String @id @default(cuid())
  title         String
  slug          String @unique
  hook          String
  resumeSummary String
  tldr          String @db.Text 

  challenge    String @db.Text 
  task         String @db.Text 
  contribution String @db.Text 
  result       String @db.Text 
  themeColor   String @default("purple-pizzazz-500")
  roles        ContributorRole[]

  skills        CaseStudySkill[]
  images        Image[]
  persona      UserPersona?
  userStory    UserStory?
  
  active        Boolean @default(true)
  showcase      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//Each Case Study has many Skills, each representing a Tool used in a specific SkillArea.
model CaseStudySkill {
  id           String      @id @default(cuid())
  caseStudy    CaseStudy   @relation(fields: [caseStudyId], references: [id])
  caseStudyId  String

  tool         Tool        @relation(fields: [toolId], references: [id])
  toolId       String

  area         SkillArea
}

model Tool {
  id             String            @id @default(cuid())
  name           String            @unique
  icon           String?          
  website        String?          
  usedInSkills   CaseStudySkill[]  
}

enum SkillArea {
  PLANNING
  DESIGN
  FRONTEND
  BACKEND
  BUILD
  TESTING
  WORKFLOW
}

model Image {
  id          String    @id @default(cuid())
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id])
  caseStudyId String
  type        ImageType

  url         String
  alt         String?
  description String?
  tags        String[]  @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([caseStudyId, type])
}

enum ImageType {
  COVER
  PROCESS
}

// User Persona model for case studies
model UserPersona {
  id          String @id @default(cuid())
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id])
  caseStudyId String @unique

  // Basic Information
  name        String
  role        String
  company     String?
  industry    String?
  avatar      String?
  
  // User Research
  painPoints  String[]
  goals       String[]
  frustrations String[]
  
  // Demographics
  age         String?
  experience  String?
  teamSize    String?
  location    String?
  
  // Additional Context
  techStack   String[]
  dailyTasks  String[]
  decisionFactors String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// User Story model for case studies
model UserStory {
  id          String @id @default(cuid())
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id])
  caseStudyId String @unique

  // Story Structure
  title       String
  description String @db.Text
  
  // User Journey
  asA         String // "As a [user type]"
  iWant       String // "I want to [goal]"
  soThat      String // "So that [benefit]"
  
  // Acceptance Criteria
  acceptanceCriteria String[]
  
  // Story Details
  priority    StoryPriority @default(MEDIUM)
  complexity  StoryComplexity @default(MEDIUM)
  status      StoryStatus @default(TODO)
  
  // Additional Context
  assumptions Json?
  dependencies Json?
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum StoryPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StoryComplexity {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

enum StoryStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum ContributorRole {
  DESIGNER
  FRONTEND_LEAD
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  FULL_STACK_DEVELOPER
  TECHNICAL_LEAD
  PRODUCT_STRATEGIST
}
