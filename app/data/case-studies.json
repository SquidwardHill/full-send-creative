[
  {
    "slug": "automated-extension-filing-4868",
    "title": "Automated Extension Filing Feature (IRS Form 4868) @ ComplYant",
    "hook": "How we automated tax extension filing for our users",
    "resumeSummary": "Led frontend development of ComplYant’s IRS Form 4868 e-filing feature, delivering a full user-facing flow in under 3 months—including dynamic form input, PDF generation, and real-time submission tracking—used by customers to file directly from their dashboard.",
    "tldr": "I led frontend development for ComplYant’s IRS Form 4868 filing feature, which automated the process of requesting a federal tax extension. We launched in under three months, enabling users to e-file directly from their dashboard—with pre-filled data, PDF receipts, and real-time status tracking.",
    "challenge": "ComplYant helps small business owners stay informed and prepared for their business taxes. Our team set out to build a seamless, in-app flow for IRS Form 4868 that allowed users to file with confidence and clarity—without leaving the platform.",
    "task": "Our pod was tasked with building an end-to-end tax extension filing flow for IRS Form 4868, allowing users to e-file directly through the ComplYant dashboard. This included:\n\n1. **Translating Form 4868** into a dynamic, user-friendly web form accessible from the user dashboard\n2. **Pre-filling the form** with historical tax and business data to streamline the filing process\n3. **Automating the e-file workflow** — including validation, submission, and retrieval of IRS acknowledgement statuses\n4. **Generating and storing** a PDF copy of the submitted extension for user records\n5. **Displaying real-time submission status** directly on the user dashboard, supported by in-app alerts and push notifications throughout the filing process",
    "contribution": "I served as the frontend lead on this project, responsible for implementing the tax extension filing interface based on Figma designs. I built dynamic, reusable components and screens that handled user interactions and real-time data updates, working closely with our design and backend teams to ensure accuracy and usability.\n\nGiven the tight timeline, our team often worked asynchronously across the stack. I helped accelerate development by shaping API schemas from the frontend perspective and identifying edge cases early, reducing back-and-forth during implementation.\n\nSince I had previously designed and built our internal design system—including the form infrastructure used in this feature—I was able to apply that domain knowledge to streamline implementation, maintain UI consistency, and reduce redundant work across the team.",
    "result": "This was a high-priority release timed for tax season and served as both a critical user feature and a proof of concept for future tax form automation. Our team successfully launched the IRS Form 4868 filing flow in under three months, with two weeks to spare before the federal deadline. Twelve customers used it to file directly through our platform.\n\nThe project's complexity—balancing user experience, compliance, and backend automation—helped lay the foundation for ComplYant's broader tax automation roadmap. My contributions helped us move quickly without sacrificing polish, delivering a feature that reduced user stress and boosted product credibility.",
    "themeColor": "purple-pizzazz-500",
    "roles": ["FRONTEND_LEAD"],
    "skills": {
      "design": ["Figma"],
      "frontend": [
        "Vue 3",
        "Inertia.js",
        "Tailwind",
        "Vite",
        "Webpack",
        "Laravel Mix",
        "Filament Forms",
        "PostCSS"
      ],
      "backend": ["Laravel (PHP 8)", "MySQL"],
      "buildTools": ["Git", "NPM", "Node", "Composer", "Docker (Laravel Sail)", "Laravel Vapor"],
      "testing": ["PHPStan", "PHPUnit", "Laravel Dusk", "Codesniffer", "BrowserStack"],
      "workflow": ["GitTower", "PHPStorm", "Tinkerwell", "Ray", "TablePlus", "Fish"]
    }
  },
  {
    "slug": "in-app-reservations",
    "title": "In App Reservations @ Passive Investing",
    "hook": "How we completely automated a 24 Hour, unmanned pickleball facility",
    "resumeSummary": "Led the end-to-end design and frontend dev of a fully automated court reservation system—no staff required.",
    "tldr": "I designed and implemented a digital reservation flow that let users book court time and gain secure, time-boxed access to a fully automated facility. I led UX strategy, prototyping, and frontend development— addressing edge cases like reservation collisions and entry pin management. The feature launched successfully and was met with strong positive feedback.",
    "challenge": "24 Hour Pickleball just opened their first facility in your town. You’re excited to try it out, so you download their app and register as guest user. The facility is fully automated and operates without on-site staff— so every user interaction needs to happen seamlessly through the app.\n\nYou open the app on your iPhone— and in just a few taps you’ve reserved your first court-time and completed the payment with Apple Pay. Instantly, you're shown a confirmation screen including your court number, reservation details, a time-restricted entry PIN, and facility instructions—everything needed for a smooth, self-service experience.",
    "task": "Design a reservation flow that feels effortless for users, while managing more complex logic behind the scenes— such as dynamic court availability, in-flow membership upgrades, reactive and data driven UI, and reservation specific, keyless facility entry. \n\n-Meet key business requirements of rapid delivery, increasing conversions, and scalable upsell opportunities.",
    "contribution": "I owned the end-to-end design and frontend development of In-App Reservations:\n\n## Feature Analysis & Planning\n\n- Collaborated with stakeholders to define the problem space, business goals, feature boundaries, and user needs\n- Identify potential risks, complexities, and edge cases\n\n## User Story Development\n\n- Applied a BDD approach to clearly define expected behaviors, documenting user stories and acceptance criteria using Gherkin's 'Given-When-Then' format\n- Maintained tight alignment between design, development, and stakeholder expectations through shared documentation\n\n<div class=\"callout-info\">\n\n**Designing from the Story First**\n\nWriting user stories in Gherkin starts as a simple brainstorming tool—but quickly becomes a powerful source of truth. The result is consistently structured, context-agnostic documentation that maps out all possible user flows— surfacing essential UI states, components, logic paths, and edge cases. These stories anchor both design and development in user-focused, real-world scenarios while serving as templates for prototyping, acceptance criteria, and unit tests.\n\n</div>\n\n## Modular Component Design\n\n- Created rough mock-up sketches to visually map out views, view-states, and transitions\n- Inspired by the Builder Pattern, I designed modular, stateful components first\n- Combined and extended atomic components to efficiently assemble more complex, scalable views\n\n## Interactive Prototyping\n\n- Created interactive prototype flows based on Gherkin user stories.\n- Led team and stakeholder feedback cycles— refining the designs and implied system behavior, data structures, and architecture.\n\n## Frontend Implementation\n\n- Developed the reservation UI and accompanying tests using **Vue.js**, **Tailwind**, **Laravel**, and **Pint**\n- Collaborated closely with backend engineers to align on data models, API contracts, validation rules, and time slot locking\n- Integrated and tested APIs to fetch court availability, handle reservation submissions, and return complete user-reservation objects with access credentials",
    "result": "My reservation feature designs were well received by stakeholders, and after feedback and iteration cycles were completed, I was able to hand off the figma files and assets for implementation. The reservation feature was developed, tested, and released into production. We received overwhelmingly positive feedback in our the facility member chat group. and had only minor bugs and additional requests.",
    "themeColor": "purple-pizzazz-500",
    "roles": ["DESIGNER", "FRONTEND_LEAD"],
    "skills": {
      "design": ["Figma"],
      "frontend": ["Vue 3", "Tailwind", "Vite"],
      "backend": ["Laravel (PHP 8)", "MySQL"],
      "buildTools": ["Git", "NPM", "Node", "Composer", "Docker"],
      "testing": ["PHPStan", "PHPUnit", "Laravel Dusk", "Codesniffer", "BrowserStack"],
      "workflow": ["GitTower", "PHPStorm", "Tinkerwell", "Ray", "TablePlus", "Fish"]
    }
  },
  {
    "slug": "metrics-reporting-dashboard",
    "title": "Metrics Reporting @ Passive Investing",
    "hook": "Transforming raw backend data into actionable insight for smarter business decisions",
    "resumeSummary": "Designed and implemented a real-time business metrics dashboard for Passive Investing’s new franchise venture, 24 Hour Pickleball. Built a fluent, chainable service architecture in Laravel to calculate and display 20+ KPIs across multiple models.",
    "tldr": "To help Passive Investing monitor the success of their new franchise venture, I built a real-time business metrics dashboard for 24 Hour Pickleball. I designed a flexible, fluent service and facade architecture in Laravel that made it easy to calculate over 20 different KPIs across multiple models—like memberships, revenue, and daily facility usage. Using a chainable syntax, the system allows developers to compose complex queries in a readable, scalable way. The final dashboard gave stakeholders instant visibility into how their investment was performing.",
    "challenge": "Imagine you're opening a new 24 Hour Pickleball facility, managed largely through an internal application. Your team has built a Laravel-powered admin dashboard that houses all data relating to the business, facility, and customers. But something is missing: a high-level overview of key business metrics like profit, new memberships, daily visitors, and month-over-month growth.",
    "task": "Our team built a dashboard to display over 20 different business metrics in real-time.To support stakeholders in making informed decisions, we needed to build a scalable dashboard module capable of displaying over 20 real-time business metrics.",
    "contribution": "Our internal system includes both a mobile app built with Ionic and an admin dashboard powered by Laravel. For the admin experience, stakeholders requested a rich set of real-time business insights—many of which required calculated, relational, and time-based data transformations.\n\nTo handle this complexity in a maintainable way, I designed and implemented a dedicated Stat service layer. I created a fluent, chainable API that made composing metric logic feel intuitive and sentence-like:\n\n```php\nconst monthGoldMemberships = count()\n    ->forPlan(MembershipLevel $membershipLevel)\n    ->byMonth(int|string $month, int|string|null $year = null);\n```\n\nThe fluent structure leverages Laravel's query builder under the hood, balancing power with readability. I focused on making the API approachable and easy for other developers to pick up quickly.\n\nI also referenced the full set of stakeholder-requested metrics to drive test coverage using **Pest**, ensuring accuracy and regression safety from day one.",
    "result": "The metric dashboard was fully implemented, tested, and successfully deployed to production. Stakeholders now have access to a comprehensive, real-time snapshot of business health. The modular Stat service has already proved valuable in other areas of the codebase, and has made expanding the dashboard a straightforward task.\n\nThis work not only delivered immediate value to the business, but also laid the foundation for future data-driven features across the platform.",
    "themeColor": "purple-pizzazz-500",
    "roles": ["FULL_STACK_DEVELOPER", "TECHNICAL_LEAD"],
    "skills": {
      "design": ["Figma"],
      "frontend": ["Vue 3", "Tailwind", "Vite"],
      "backend": ["Laravel (PHP 8)", "MySQL"],
      "buildTools": ["Git", "NPM", "Node", "Composer", "Docker"],
      "testing": ["PHPStan", "PHPUnit", "Laravel Dusk", "Codesniffer", "BrowserStack"],
      "workflow": ["GitTower", "PHPStorm", "Tinkerwell", "Ray", "TablePlus", "Fish"]
    }
  },
  {
    "slug": "tax-estimates",
    "title": "Tax Estimates @ ComplYant",
    "hook": "How we empowered small business owners to prepare for tax season—automatically.",
    "resumeSummary": "Co-developed ComplYant’s tax estimate feature by designing the Plaid domain. Built a vendor-agnostic API integration layer with clear service boundaries, fluent APIs, and event-driven flows.",
    "tldr": "I co-developed the Plaid domain for ComplYant’s tax estimate feature, crafting a vendor-agnostic integration layer with clear service boundaries, fluent APIs and event-driven flows. Working in tandem with the Hurdlr team, we delivered a seamless user experience that turned live transaction data into automated tax estimates—paving the way for future tools like Schedule C generation.",
    "challenge": "You’re a small business owner juggling client work, invoices, and admin tasks. You’ve signed up for a platform that helps you stay compliant— and its already helping you track tax deadlines, and the forms and deduction categories your business qualifies. \n\nBut taxes aren’t just about knowing *when* to file. You also need to know *how much* to save. Our goal was to bridge that gap. \n\n We envisioned a proactive system that estimated users’ quarterly taxes using real-time business transaction data—giving them clarity and confidence as they saved and planned throughout the year.",
    "task": "Develop the core functionality for Tax Estimation by ingesting, storing, and interpreting business bank transaction data (via Plaid) and transforming it into real-time tax estimates using a third-party tax API (Hurdlr). Longer term, this system would also support auto-generating IRS Schedule C forms and personalized deductions based on tax ID types.",
    "contribution": "I co-developed the **Plaid domain**, designing a vendor-agnostic integration layer with clear service boundaries, fluent APIs and event-driven flows. \n\n**Feature planning & architectural design →** \n\n- ERD mapping, flow charts, schema mapping and documentation to align team understanding and scope. \n- Successfully proposed adoption of **Saloon** to standardize third-party API integration \n\n**Domain design & implementation →** \n\n- Built the **OAuth flow** and Plaid Link integration for connecting users' business bank accounts. \n- Developed a fluent **service layer** for Plaid API operations \n- Normalized, validated, and shared data with DTOs \n- Built event driven flows using Plaid Webhooks for domain resource sharing (Hurdlr, Expense Tracking, Tax Budget) \n- Standardized errors and messages using interface-driven exception translation (improved debugging and user experiences) \n\n**Testing & maintainability →** \n\n- Successfully proposed adoption of Saloon fixtures to record (thoughtfully redacted) live API responses used for test mocking \n- Designed factories to assist in test readability, edge cases, and behavior isolation \n- Test domain logic and prevent future regressions with unit tests",
    "result": "We launched the **Tax Estimates** feature successfully, enabling users to: \n- Connect business bank accounts \n- View categorized expenses and real-time estimated tax obligations \n- Begin preparing for tax season ahead of deadlines \n\nThe groundwork laid in the Plaid domain also set the stage for future functionality, including **Schedule C form generation**, **custom write-offs**, and more intelligent tax planning tools. Unfortunately, the Schedule C feature was in active development when the company was unexpectedly wound down.",
    "themeColor": "purple-pizzazz-500",
    "roles": ["BACKEND_DEVELOPER", "TECHNICAL_LEAD"],
    "skills": {
      "design": ["Miro"],
      "frontend": [],
      "backend": ["Laravel (DDD architecture)", "Plaid API", "Hurdlr API"],
      "buildTools": ["Saloon", "Spatie Laravel Data"],
      "testing": ["Pest"],
      "workflow": ["PHPStorm", "Ray", "Tinkerwell"]
    }
  }
]
